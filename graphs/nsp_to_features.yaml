# graph parameters
parameters:
  nsp_channels: &nsp_channels 256

# node-specific parameters
nodes:
  - name: bin_multiple
    nickname: bin_multiple
    machine: brand
    module: ../brand-modules/brand-nsp
    run_priority: 99
    cpu_affinity: 16
    redis_outputs:
      binned_spikes: binned_spikes
    parameters:
      chan_per_stream: [96, 96, 64, 128, 128]
      total_channels: *total_features
      bin_size: 20
      log: INFO
      input_streams:
        [thresh_cross_1, thresh_cross_2, thresh_cross_3, sbp_1, sbp_2]
      input_field: [crossings, crossings, crossings, samples, samples]
      input_dtype: [int16, int16, int16, float32, float32]
      output_stream: binned_spikes
      output_dtype: float32

  - name: bpExtraction
    nickname: sbp_2
    machine: brand
    module: ../brand-modules/brand-nsp
    run_priority: 99
    cpu_affinity: 14-15
    redis_outputs:
      sbp_2: band_power
    parameters:
      log: INFO
      pack_per_call: 1 # number of redis packets to pull per loop
      butter_lowercut: 250 # lower cutoff freq of bandpass filter
      butter_uppercut: ~ # upper cutoff freq of bandpass filter
      butter_order: 4 # butterworth filter order
      enable_CAR: False
      CAR_group_sizes: 64
      acausal_filter_lag: 120
      acausal_filter: ~
      input_name: reref_neural
      input_chan_per_stream: *nsp_channels # number of channels
      input_samp_per_stream: 30 # number of samples per channel per redis entry
      input_samp_freq: 30000
      input_data_type: float32
      use_tracking_id: True
      timestamp_data_type: uint64
      sync_key: sync
      time_key: ts
      sync_source_id: nsp_idx_1
      neural_ch_range: [128, 256]
      n_channels: 128
      ch_mask_stream: z_mask_stream

  - name: bpExtraction
    nickname: sbp_1
    machine: brand
    module: ../brand-modules/brand-nsp
    run_priority: 99
    cpu_affinity: 12-13
    redis_outputs:
      sbp_1: band_power
    parameters:
      log: INFO
      pack_per_call: 1 # number of redis packets to pull per loop
      butter_lowercut: 250 # lower cutoff freq of bandpass filter
      butter_uppercut: ~ # upper cutoff freq of bandpass filter
      butter_order: 4 # butterworth filter order
      enable_CAR: False
      CAR_group_sizes: 64
      acausal_filter_lag: 120
      acausal_filter: ~
      input_name: reref_neural
      input_chan_per_stream: *nsp_channels # number of channels
      input_samp_per_stream: 30 # number of samples per channel per redis entry
      input_samp_freq: 30000
      input_data_type: float32
      use_tracking_id: True
      timestamp_data_type: uint64
      sync_key: sync
      time_key: ts
      sync_source_id: nsp_idx_1
      neural_ch_range: [0, 128]
      n_channels: 128
      ch_mask_stream: z_mask_stream

  - name: thresholdExtraction
    nickname: thresh_cross_3
    machine: brand
    module: ../brand-modules/brand-nsp
    run_priority: 99
    cpu_affinity: 10-11
    redis_outputs:
      thresh_cross_3: thresh_cross
    parameters:
      log: INFO
      pack_per_call: 1 # number of redis packets to pull per loop
      thresh_mult: -4.5 # threshold Values
      thresh_calc_len: 2000 # how much data (in buffers of data -- usually 1 ms worth) do we want to use to calculate threshold values?
      butter_lowercut: 250 # lower cutoff freq of bandpass filter
      butter_uppercut: ~ # upper cutoff freq of bandpass filter
      butter_order: 4 # butterworth filter order
      enable_CAR: False
      output_filtered: False # Do we want to export the filtered data? Good for debugging, but makes the rdb big!
      acausal_filter_lag: 120
      acausal_filter: IIR
      input_name: reref_neural
      input_chan_per_stream: *nsp_channels # number of channels
      input_samp_per_stream: 30 # number of samples per channel per redis entry
      input_samp_freq: 30000
      input_data_type: float32
      use_tracking_id: True
      timestamp_data_type: uint64
      sync_key: sync
      time_key: ts
      sync_source_id: nsp_idx_1
      thresholds_stream: thresholds
      neural_ch_range: [192, 256]
      thresholds_ch_range: [192, 256]
      n_channels: 64
      ch_mask_stream: z_mask_stream

  - name: thresholdExtraction
    nickname: thresh_cross_2
    machine: brand
    module: ../brand-modules/brand-nsp
    run_priority: 99
    cpu_affinity: 8-9
    redis_outputs:
      thresh_cross_2: thresh_cross
    parameters:
      log: INFO
      pack_per_call: 1 # number of redis packets to pull per loop
      thresh_mult: -4.5 # threshold Values
      thresh_calc_len: 2000 # how much data (in buffers of data -- usually 1 ms worth) do we want to use to calculate threshold values?
      butter_lowercut: 250 # lower cutoff freq of bandpass filter
      butter_uppercut: ~ # upper cutoff freq of bandpass filter
      butter_order: 4 # butterworth filter order
      enable_CAR: False
      output_filtered: False # Do we want to export the filtered data? Good for debugging, but makes the rdb big!
      acausal_filter_lag: 120
      acausal_filter: IIR
      input_name: reref_neural
      input_chan_per_stream: *nsp_channels # number of channels
      input_samp_per_stream: 30 # number of samples per channel per redis entry
      input_samp_freq: 30000
      input_data_type: float32
      use_tracking_id: True
      timestamp_data_type: uint64
      sync_key: sync
      time_key: ts
      sync_source_id: nsp_idx_1
      thresholds_stream: thresholds
      neural_ch_range: [96, 192]
      thresholds_ch_range: [96, 192]
      n_channels: 96
      ch_mask_stream: z_mask_stream

  - name: thresholdExtraction
    nickname: thresh_cross_1
    machine: brand
    module: ../brand-modules/brand-nsp
    run_priority: 99
    cpu_affinity: 6-7
    redis_outputs:
      thresh_cross_1: thresh_cross
    parameters:
      log: INFO
      pack_per_call: 1 # number of redis packets to pull per loop
      thresh_mult: -4.5 # threshold Values
      thresh_calc_len: 2000 # how much data (in buffers of data -- usually 1 ms worth) do we want to use to calculate threshold values?
      butter_lowercut: 250 # lower cutoff freq of bandpass filter
      butter_uppercut: ~ # upper cutoff freq of bandpass filter
      butter_order: 4 # butterworth filter order
      enable_CAR: False
      output_filtered: False # Do we want to export the filtered data? Good for debugging, but makes the rdb big!
      acausal_filter_lag: 120
      acausal_filter: IIR
      input_name: reref_neural
      input_chan_per_stream: *nsp_channels # number of channels
      input_samp_per_stream: 30 # number of samples per channel per redis entry
      input_samp_freq: 30000
      input_data_type: float32
      use_tracking_id: True
      timestamp_data_type: uint64
      sync_key: sync
      time_key: ts
      sync_source_id: nsp_idx_1
      thresholds_stream: thresholds
      neural_ch_range: [0, 96]
      thresholds_ch_range: [0, 96]
      n_channels: 96
      ch_mask_stream: z_mask_stream

  - name: re_reference
    nickname: re_ref
    machine: brand
    module: ../brand-modules/brand-nsp
    run_priority: 99
    cpu_affinity: 23
    redis_outputs:
      reref_neural: rerefContinuousNeural
    parameters:
      log: INFO
      input_stream_name: nsp_neural
      output_stream_name: reref_neural
      coefs_stream_name: rereference_parameters
      chan_per_stream: *nsp_channels
      samp_per_stream: 30
      chan_total: *nsp_channels
      start_channel: 0
      output_dtype: float32

  - name: centrals_interface
    nickname: centrals_interface
    module: ../brand-modules/brand-nsp
    machine: gpc
    parameters:
      log: INFO
      env_file_path: /samba/tmp/BRAND/environment.sh

  - name: cerebusAdapterGem
    nickname: nsp_in
    module: ../brand-modules/brand-nsp
    machine: brand
    run_priority: 99
    cpu_affinity: 18
    redis_outputs:
      nsp_neural: ContinuousNeural
    parameters:
      broadcast_ip: 192.168.137.255
      broadcast_port: 51002
      broadcast_device: enp3s0f0
      num_streams: 1
      stream_names: [nsp_neural]
      samp_freq: [30000]
      packet_type: [5]
      chan_per_stream: [*nsp_channels]
      samp_per_stream: [30]
