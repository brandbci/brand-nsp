graph_name: radial8_ol
metadata:
  participant_id: sim
  session_description: Benchmark timing from threshold crossings to FSM

# graph parameters
parameters:
  nsp_channels: &nsp_channels 256
  total_channels: &total_channels 512
  total_features: &total_features 512

# node-specific parameters
nodes:
  # - name: bin_multiple
  #   nickname: bin_multiple
  #   machine: brand
  #   module: ../brand-modules/brand-emory
  #   run_priority: 99
  #   cpu_affinity: 15
  #   redis_outputs:
  #     binned_spikes: binned_spikes
  #   parameters:
  #     chan_per_stream: *nsp_channels
  #     total_channels: *total_features
  #     bin_size: 10
  #     log: INFO
  #     input_streams: [thresh_cross_1, thresh_cross_2, sbp_1, sbp_2]
  #     input_field: [crossings, crossings, samples, samples]
  #     input_dtype: [int16, int16, float32, float32]
  #     output_stream: binned_spikes
  #     output_dtype: float32

  # - name: thresholdExtraction
  #   nickname: thresh_cross_1
  #   machine: brand
  #   module: ../brand-modules/brand-nsp
  #   run_priority: 99
  #   cpu_affinity: 12-13
  #   redis_outputs:
  #     thresh_cross_1: thresh_cross
  #   parameters:
  #     log: INFO
  #     pack_per_call: 1 # number of redis packets to pull per loop
  #     thresh_mult: -3.5 # threshold Values
  #     thresh_calc_len: 2000 # how much data (in buffers of data -- usually 1 ms worth) do we want to use to calculate threshold values?
  #     butter_lowercut: 250 # lower cutoff freq of bandpass filter
  #     butter_uppercut: ~ # upper cutoff freq of bandpass filter
  #     butter_order: 4 # butterworth filter order
  #     enable_CAR: True
  #     CAR_group_sizes: 96
  #     output_filtered: False # Do we want to export the filtered data? Good for debugging, but makes the rdb big!
  #     acausal_filter_lag: 120
  #     acausal_filter: IIR
  #     input_name: nsp_neural_1
  #     input_chan_per_stream: *nsp_channels # number of channels
  #     input_samp_per_stream: 30 # number of samples per channel per redis entry
  #     input_samp_freq: 30000
  #     sync_key: sync
  #     time_key: ts
  #     sync_source_id: nsp_idx_1
  #     nsp_channels: *nsp_channels
  #     thresholds_stream: thresholds
  #     thresholds_ch_range: [0, 96]
  #     ch_mask_stream: z_mask_stream
  #     adaptive_thresholds: False
  #     adaptive_rms_window_len: 5000 # 5s at 1ms per entry
  #     adaptive_rms_stream: rms_continuous_1

  # - name: thresholdExtraction
  #   nickname: thresh_cross_2
  #   machine: brand
  #   module: ../brand-modules/brand-nsp
  #   run_priority: 99
  #   cpu_affinity: 10-11
  #   redis_outputs:
  #     thresh_cross_2: thresh_cross
  #   parameters:
  #     log: INFO
  #     pack_per_call: 1 # number of redis packets to pull per loop
  #     thresh_mult: -3.5 # threshold Values
  #     thresh_calc_len: 2000 # how much data (in buffers of data -- usually 1 ms worth) do we want to use to calculate threshold values?
  #     butter_lowercut: 250 # lower cutoff freq of bandpass filter
  #     butter_uppercut: ~ # upper cutoff freq of bandpass filter
  #     butter_order: 4 # butterworth filter order
  #     enable_CAR: True
  #     CAR_group_sizes: 96
  #     output_filtered: False # Do we want to export the filtered data? Good for debugging, but makes the rdb big!
  #     acausal_filter_lag: 120
  #     acausal_filter: IIR
  #     input_name: nsp_neural_2
  #     input_chan_per_stream: *nsp_channels # number of channels
  #     input_samp_per_stream: 30 # number of samples per channel per redis entry
  #     input_samp_freq: 30000
  #     sync_key: sync
  #     time_key: ts
  #     sync_source_id: nsp_idx_2
  #     nsp_channels: *nsp_channels
  #     thresholds_stream: thresholds
  #     thresholds_ch_range: [96, 192]
  #     ch_mask_stream: z_mask_stream
  #     adaptive_thresholds: False
  #     adaptive_rms_window_len: 5000 # 5s at 1ms per entry
  #     adaptive_rms_stream: rms_continuous_2

  # - name: bpExtraction
  #   nickname: sbp_1
  #   machine: brand
  #   module: ../brand-modules/brand-nsp
  #   run_priority: 99
  #   cpu_affinity: 8-9
  #   redis_outputs:
  #     sbp_1: band_power
  #   parameters:
  #     log: INFO
  #     pack_per_call: 1 # number of redis packets to pull per loop
  #     butter_lowercut: 250 # lower cutoff freq of bandpass filter
  #     butter_uppercut: ~ # upper cutoff freq of bandpass filter
  #     butter_order: 4 # butterworth filter order
  #     enable_CAR: True
  #     CAR_group_sizes: 96
  #     acausal_filter_lag: 120
  #     acausal_filter: ~
  #     input_name: nsp_neural_1
  #     input_chan_per_stream: *nsp_channels # number of channels
  #     input_samp_per_stream: 30 # number of samples per channel per redis entry
  #     input_samp_freq: 30000
  #     sync_key: sync
  #     time_key: ts
  #     sync_source_id: nsp_idx_1
  #     nsp_channels: *nsp_channels
  #     ch_mask_stream: z_mask_stream

  # - name: bpExtraction
  #   nickname: sbp_2
  #   machine: brand
  #   module: ../brand-modules/brand-nsp
  #   run_priority: 99
  #   cpu_affinity: 6-7
  #   redis_outputs:
  #     sbp_2: band_power
  #   parameters:
  #     log: INFO
  #     pack_per_call: 1 # number of redis packets to pull per loop
  #     butter_lowercut: 250 # lower cutoff freq of bandpass filter
  #     butter_uppercut: ~ # upper cutoff freq of bandpass filter
  #     butter_order: 4 # butterworth filter order
  #     enable_CAR: True
  #     CAR_group_sizes: 96
  #     acausal_filter_lag: 120
  #     acausal_filter: ~
  #     input_name: nsp_neural_2
  #     input_chan_per_stream: *nsp_channels # number of channels
  #     input_samp_per_stream: 30 # number of samples per channel per redis entry
  #     input_samp_freq: 30000
  #     sync_key: sync
  #     time_key: ts
  #     sync_source_id: nsp_idx_2
  #     nsp_channels: *nsp_channels
  #     ch_mask_stream: z_mask_stream

  - name: cerebusAdapterGem
    nickname: nsp_in
    machine: brand
    module: ../brand-modules/brand-nsp
    run_priority: 99
    cpu_affinity: 4-5
    parameters:
      broadcast_ip: 192.168.137.255
      broadcast_port: 51002
      broadcast_device: enp3s0f0
      num_streams: 1
      stream_names: [nsp_neural]
      samp_freq: [30000]
      packet_type: [5]
      chan_per_stream: [*nsp_channels]
      samp_per_stream: [30]

  # - name: cerebusAdapter
  #   nickname: nsp_in_2
  #   machine: brand
  #   module: ../brand-modules/brand-nsp
  #   run_priority: 99
  #   cpu_affinity: 5
  #   parameters:
  #     broadcast_ip: 192.168.137.255
  #     broadcast_port: 51002
  #     broadcast_device: enp4s0f0
  #     num_streams: 1
  #     stream_names: [nsp_neural_2]
  #     samp_freq: [30000]
  #     packet_type: [5]
  #     chan_per_stream: [*nsp_channels]
  #     samp_per_stream: [30]




  # - saveRDB:
  #     name: saveRDB.py
  #     module: ../brand-modules/brand-emory
  #     autorun: True
  #     parameters:
  #       flush_streams_before_save: [nsp_neural]
  #       flush_rdb_after_save: True
  #       flush_rdb_except_streams: [thresholds,normalization_parameters,normalize_exit_parameters,z_mask_stream]