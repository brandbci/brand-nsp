graph_name: radial8_ol
metadata:
  participant_id: sim
  session_description: Benchmark timing from threshold crossings to FSM

# graph parameters
parameters:
  nsp_channels_split: &nsp_channels_split 128
  nsp_channels: &nsp_channels 256
  total_channels: &total_channels 256
  total_features: &total_features 512

# node-specific parameters
nodes:
  - name: auto_cue
    nickname: auto_cue
    module: ../brand-modules/brand-emory
    machine: brand
    run_priority: 99
    cpu_affinity: 16-17
    redis_outputs:
      control: control_vec
    parameters:
      # logging level for the process
      log: INFO
      sync_key: sync
      time_key: ts
      # in/out stream info
      input_stream: binned_spikes
      input_rate: 100
      output_stream: control
      output_vect_name: samples
      # target info
      target_stream: targetData
      target_list: ["X", "Y"]
      target_dtype: float32
      target_on_off: state
      target_state_dtype: int32
      target_off_center: False
      target_move_state: 2
      # movement info
      move_stream: cursorData
      move_list: ["X", "Y"]
      move_list_len: 2
      move_dtype: float32
      speed: 266
      # velocity profile info
      vel_profile: gaussian
      vel_output: True
      error_thres: 0.5
      min_speed: 0.01
      # movement trigger info
      triggered: false
      trigger_stream: move_trigger

  - name: bin_multiple
    nickname: bin_multiple
    machine: brand
    module: ../brand-modules/brand-emory
    run_priority: 99
    cpu_affinity: 14
    redis_outputs:
      binned_spikes: binned_spikes
    parameters:
      chan_per_stream: *nsp_channels
      total_channels: *total_features
      bin_size: 10
      log: INFO
      input_streams: [thresh_cross_1, sbp_1]
      input_field: [crossings, samples]
      input_dtype: [int16, float32]
      # input_streams: [thresh_cross_1, thresh_cross_2, sbp_1, sbp_2]
      # input_field: [crossings, crossings, samples, samples]
      # input_dtype: [int16, int16, float32, float32]
      output_stream: binned_spikes
      output_dtype: float32

  - name: bpExtraction
    nickname: sbp_1
    machine: brand
    module: ../brand-modules/brand-nsp
    run_priority: 99
    cpu_affinity: 10-13
    redis_outputs:
      sbp_1: band_power
    parameters:
      log: INFO
      pack_per_call: 1 # number of redis packets to pull per loop
      butter_lowercut: 250 # lower cutoff freq of bandpass filter
      butter_uppercut: ~ # upper cutoff freq of bandpass filter
      butter_order: 4 # butterworth filter order
      enable_CAR: True
      CAR_group_sizes: 64
      acausal_filter_lag: 120
      acausal_filter: ~
      input_name: nsp_neural
      input_chan_per_stream: *nsp_channels # number of channels
      input_samp_per_stream: 30 # number of samples per channel per redis entry
      input_samp_freq: 30000
      timestamp_data_type: uint64
      sync_key: sync
      time_key: ts
      sync_source_id: nsp_idx_1
      nsp_channels: *nsp_channels
      ch_mask_stream: z_mask_stream

  - name: thresholdExtraction
    nickname: thresh_cross_1
    machine: brand
    module: ../brand-modules/brand-nsp
    run_priority: 99
    cpu_affinity: 6-9
    redis_outputs:
      thresh_cross_1: thresh_cross
    parameters:
      log: INFO
      pack_per_call: 1 # number of redis packets to pull per loop
      thresh_mult: -3.5 # threshold Values
      thresh_calc_len: 2000 # how much data (in buffers of data -- usually 1 ms worth) do we want to use to calculate threshold values?
      butter_lowercut: 250 # lower cutoff freq of bandpass filter
      butter_uppercut: ~ # upper cutoff freq of bandpass filter
      butter_order: 4 # butterworth filter order
      enable_CAR: True
      CAR_group_sizes: 64
      output_filtered: False # Do we want to export the filtered data? Good for debugging, but makes the rdb big!
      acausal_filter_lag: 120
      acausal_filter: IIR
      input_name: nsp_neural
      input_chan_per_stream: *nsp_channels # number of channels
      input_samp_per_stream: 30 # number of samples per channel per redis entry
      input_samp_freq: 30000
      timestamp_data_type: uint64
      sync_key: sync
      time_key: ts
      sync_source_id: nsp_idx_1
      nsp_channels: *nsp_channels
      thresholds_stream: thresholds
      thresholds_ch_range: [0, 256]
      ch_mask_stream: z_mask_stream

  - name: cerebusAdapterGem
    nickname: nsp_in
    machine: brand
    module: ../brand-modules/brand-nsp
    run_priority: 99
    cpu_affinity: 4-5
    redis_outputs:
      nsp_neural: ContinuousNeural
    parameters:
      broadcast_ip: 192.168.137.255
      broadcast_port: 51002
      broadcast_device: enp3s0f0
      num_streams: 1
      stream_names: [nsp_neural]
      samp_freq: [30000]
      packet_type: [5]
      chan_per_stream: [*nsp_channels]
      samp_per_stream: [30]


derivatives:

  - exportNWB:
      name: exportNWB.py
      module: ../brand-modules/brand-emory
      autorun: False
      parameters:
        devices_file: ../config/T11/devices.yaml
        participant_file: ../config/T11/T11.yaml
        description: recording autocue data from center out task and display
        sync_key: sync
        time_key: ts
        sync_timing_hz: 30000
        ch_mask_stream: z_mask_stream
        find_reset_stream: cursorData
        reset_keys: ['nsp_idx_1', 'nsp_idx_2']
        thresh_stream: thresholds
        streams:
          # nsp_neural_1:
          #   enable: False
          #   sync: ['nsp_idx_1']
          # nsp_neural_2:
          #   enable: False
          #   sync: ['nsp_idx_2']
          thresh_cross_1:
            enable: True
            sync: ["nsp_idx_1"]
            rate: 1000
          thresh_cross_2:
            enable: True
            sync: ["nsp_idx_2"]
            rate: 1000
          sbp_1:
            enable: True
            sync: ["nsp_idx_1"]
            rate: 1000
          sbp_2:
            enable: True
            sync: ["nsp_idx_2"]
            rate: 1000
          binned_spikes:
            enable: True
            sync: ["nsp_idx_1", "nsp_idx_2"]
            rate: 100
          # normalize_norm:
          #   enable: True
          #   sync: ["nsp_idx_1", "nsp_idx_2"]
          #   rate: 100
          control:
            enable: True
            sync: ["nsp_idx_1", "nsp_idx_2"]
            rate: 100
          cursorData:
            enable: True
            sync: ["nsp_idx_1", "nsp_idx_2"]
            rate: 100
          targetData:
            enable: True
            sync: ["nsp_idx_1", "nsp_idx_2"]
            rate: 100
          state:
            enable: True
            sync: ["nsp_idx_1", "nsp_idx_2"]
          trial_success:
            enable: True
            sync: ["nsp_idx_1", "nsp_idx_2"]
          trial_info:
            enable: True
            sync: ["nsp_idx_1", "nsp_idx_2"]

  - saveRDB:
      name: saveRDB.py
      module: ../brand-modules/brand-emory
      autorun: True
      parameters:
        flush_streams_before_save: [] #[nsp_neural]
        flush_rdb_after_save: True
        flush_rdb_except_streams: [thresholds,normalization_parameters,normalize_exit_parameters,z_mask_stream]